<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fluent validation on DeviCode</title>
    <link>https://devicode.io/tags/fluent-validation/</link>
    <description>Recent content in Fluent validation on DeviCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Feb 2023 06:12:03 +0000</lastBuildDate><atom:link href="https://devicode.io/tags/fluent-validation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>#007 | Realtime communication with SignalR</title>
      <link>https://devicode.io/posts/007-real-time-communication-using-signalr/</link>
      <pubDate>Mon, 27 Feb 2023 06:12:03 +0000</pubDate>
      
      <guid>https://devicode.io/posts/007-real-time-communication-using-signalr/</guid>
      <description>SignalRSignalR is .Net&amp;rsquo;s solution to realtime communications. It enables the creation of hubs and then efficiently route all messages to all clients.
You can checkout this Hi-Lo Game which leverages SignalR (source).
The idea is that all messages from all player (and also the game engine) are broadcasted to all players (connect to.
The implementationServer sideGameHub.cs
A cluster of connections is called a hub. The two main methods of our hub are the Guess and WriteToPageAsync methods:</description>
    </item>
    
    <item>
      <title>#006 | The problem with ILogger</title>
      <link>https://devicode.io/posts/006-the-problem-with-ilogger/</link>
      <pubDate>Mon, 20 Feb 2023 06:12:03 +0000</pubDate>
      
      <guid>https://devicode.io/posts/006-the-problem-with-ilogger/</guid>
      <description>The problem with ILoggerThe current implementation of ILogger uses object[] in its signatures, which means any value passed to it either 1) is already on the heap or 2) is boxed.
Log(ILogger, LogLevel, Exception, String, Object[]) Now consider the app logs the salary of any given Employee:
class Employee { public int Id { get; set; } public string Name { get; set; } public DateTime DateOfBirth { get; set; } public decimal Salary { get; set; } } // Creating the Employee.</description>
    </item>
    
    <item>
      <title>#005 | What are Fluent Validation and how to use them</title>
      <link>https://devicode.io/posts/005-what-are-fluent-assertions-how-to-use-them/</link>
      <pubDate>Mon, 13 Feb 2023 03:32:12 +0000</pubDate>
      
      <guid>https://devicode.io/posts/005-what-are-fluent-assertions-how-to-use-them/</guid>
      <description>Why would anyone use Fluent Validations?Consider the following Employee class:
class Employee { public int Id { get; set; } public string Name { get; set; } public DateTime DateOfBirth {get; set; } } When we use fluent validation, we are not forced to separate our validation logic into another class, but it enables us to do so. For example, an app might have a general validation for any given employee, but the Finance module has more rules for the same class.</description>
    </item>
    
  </channel>
</rss>
